Barman News - History of user-visible changes

Version 2.14 - 22 September 2022

- Add the `barman-cloud-backup-delete` command which allows backups in
  cloud storage to be deleted by specifiying either a backup ID or a
  retention policy.

- Allow backups to be retained beyond any retention policies in force by
  introducing the ability to tag existing backups as archival backups
  using `barman keep` and `barman-cloud-backup-keep`.

- Allow the use of SAS authentication tokens created at the restricted
  blob container level (instead of the wider storage account level) for
  Azure blob storage

- Significantly speed up `barman restore` into an empty directory for
  backups that contain hundreds of thousands of files.

- Bug fixes:

    - The backup privileges check will no longer fail if the user lacks
      "userepl" permissions and will return better error messages if any
      required permissions are missing (#318 and #319).

Version 2.13 - 26 July 2021

- Add Azure blob storage support to barman-cloud

- Support tablespace remapping in barman-cloud-restore via
  `--tablespace name:location`

- Allow barman-cloud-backup and barman-cloud-wal-archive to run as
  Barman hook scripts, to allow data to be relayed to cloud storage
  from the Barman server

- Bug fixes:

    - Stop backups failing due to idle_in_transaction_session_timeout
      (https://github.com/EnterpriseDB/barman/issues/333)

    - Fix a race condition between backup and archive-wal in updating
      xlog.db entries (#328)

    - Handle PGDATA being a symlink in barman-cloud-backup, which led to
      "seeking backwards is not allowed" errors on restore (#351)

    - Recreate pg_wal on restore if the original was a symlink (#327)

    - Recreate pg_tblspc symlinks for tablespaces on restore (#343)

    - Make barman-cloud-backup-list skip backups it cannot read, e.g.,
      because they are in Glacier storage (#332)

    - Add `-d database` option to barman-cloud-backup to specify which
      database to connect to initially (#307)

    - Fix "Backup failed uploading data" errors from barman-cloud-backup
      on Python 3.8 and above, caused by attempting to pickle the boto3
      client (#361)

    - Correctly enable server-side encryption in S3 for buckets that do
      not have encryption enabled by default.

      In Barman 2.12, barman-cloud-backup's `--encryption` option did
      not correctly enable encryption for the contents of the backup if
      the backup was stored in an S3 bucket that did not have encryption
      enabled. If this is the case for you, please consider deleting
      your old backups and taking new backups with Barman 2.13.

      If your S3 buckets already have encryption enabled by default
      (which we recommend), this does not affect you.

Version 2.12.1 - 30 June 2021

-   Bug fixes:

    -   Allow specifying target-tli with other target-* recovery options
    -   Fix incorrect NAME in barman-cloud-backup-list manpage
    -   Don't raise an error if SIGALRM is ignored
    -   Fetch wal_keep_size, not wal_keep_segments, from Postgres 13

Version 2.12 - 5 Nov 2020

-   Introduce a new backup_method option called local-rsync which
    targets those cases where Barman is installed on the same server
    where PostgreSQL is and directly uses rsync to take base backups,
    bypassing the SSH layer.

-   Bug fixes:

    -   Avoid corrupting boto connection in worker processes
    -   Avoid connection attempts to PostgreSQL during tests

Version 2.11 - 9 Jul 2020

-   Introduction of the barman-cli-cloud package that contains all cloud
    related utilities.

-   Add barman-cloud-wal-restore to restore a WAL file previously
    archived with barman-cloud-wal-archive from an object store

-   Add barman-cloud-restore to restore a backup previously taken with
    barman-cloud-backup from an object store

-   Add barman-cloud-backup-list to list backups taken with
    barman-cloud-backup in an object store

-   Add support for arbitrary archive size for barman-cloud-backup

-   Add support for --endpoint-url option to cloud utilities

-   Remove strict superuser requirement for PG 10+ (by Kaarel Moppel)

-   Add --log-level runtime option for barman to override default log
    level for a specific command

-   Support for PostgreSQL 13

-   Bug fixes:

    -   Suppress messages and warning with SSH connections in barman-cli
        (GH-257)
    -   Fix a race condition when retrieving uploaded parts in
        barman-cloud-backup (GH-259)
    -   Close the PostgreSQL connection after a backup (GH-258)
    -   Check for uninitialized replication slots in receive-wal --reset
        (GH-260)
    -   Ensure that begin_wal is valorised before acting on it (GH-262)
    -   Fix bug in XLOG/WAL arithmetic with custom segment size (GH-287)
    -   Fix rsync compatibility error with recent rsync
    -   Fix PostgreSQLClient version parsing
    -   Fix PostgreSQL exception handling with non ASCII messages
    -   Ensure each postgres connection has an empty search_path
    -   Avoid connecting to PostgreSQL while reading a backup.info file

If you are using already barman-cloud-wal-archive or barman-cloud-backup
installed via RPM/Apt package and you are upgrading your system, you
must install the barman-cli-cloud package. All cloud related tools are
now part of the barman-cli-cloud package, including
barman-cloud-wal-archive and barman-cloud-backup that were previosly
shipped with barman-cli. The reason is complex dependency management of
the boto3 library, which is a requirement for the cloud utilities.

Version 2.10 - 5 Dec 2019

-   Pull .partial WAL files with get-wal and barman-wal-restore,
    allowing restore_command in a recovery scenario to fetch a partial
    WAL file's content from the Barman server. This feature simplifies
    and enhances RPO=0 recovery operations.

-   Store the PostgreSQL system identifier in the server directory and
    inside the backup information file. Improve check command to verify
    the consistency of the system identifier with active connections
    (standard and replication) and data on disk.

-   A new script called barman-cloud-wal-archive has been added to the
    barman-cli package to directly ship WAL files from PostgreSQL (using
    archive_command) to cloud object storage services that are
    compatible with AWS S3. It supports encryption and compression.

-   A new script called barman-cloud-backup has been added to the
    barman-cli package to directly ship base backups from a local
    PostgreSQL server to cloud object storage services that are
    compatible with AWS S3. It supports encryption, parallel upload,
    compression.

-   Automated creation of replication slots through the server/global
    option create_slot. When set to auto, Barman creates the replication
    slot, in case streaming_archiver is enabled and slot_name is
    defined. The default value is manual for back-compatibility.

-   Add '-w/--wait' option to backup command, making Barman wait for all
    required WAL files to be archived before considering the backup
    completed. Add also the --wait-timeout option (default 0, no
    timeout).

-   Redact passwords from Barman output, in particular from
    barman diagnose (InfoSec)

-   Improve robustness of receive-wal --reset command, by verifying that
    the last partial file is aligned with the current location or, if
    present, with replication slot's.

-   Documentation improvements

-   Bug fixes:

    -   Wrong string matching operation when excluding tablespaces
        inside PGDATA (GH-245)
    -   Minor fixes in WAL delete hook scripts (GH-240)
    -   Fix PostgreSQL connection aliveness check (GH-239)

Version 2.9 - 1 Aug 2019

-   Transparently support PostgreSQL 12, by supporting the new way of
    managing recovery and standby settings through GUC options and
    signal files (recovery.signal and standby.signal)

-   Add --bwlimit command line option to set bandwidth limitation for
    backup and recover commands

-   Ignore WAL archive failure for check command in case the latest
    backup is WAITING_FOR_WALS

-   Add --target-lsn option to set recovery target Log Sequence Number
    for recover command with PostgreSQL 10 or higher

-   Add --spool-dir option to barman-wal-restore so that users can
    change the spool directory location from the default, avoiding
    conflicts in case of multiple PostgreSQL instances on the same
    server (thanks to Drazen Kacar).

-   Rename barman_xlog directory to barman_wal

-   JSON output writer to export command output as JSON objects and
    facilitate integration with external tools and systems (thanks to
    Marcin Onufry Hlybin). Experimental in this release.

Bug fixes:

-   replication-status doesn’t show streamers with no slot (GH-222)

-   When checking that a connection is alive (“SELECT 1” query),
    preserve the status of the PostgreSQL connection (GH-149). This
    fixes those cases of connections that were terminated due to
    idle-in-transaction timeout, causing concurrent backups to fail.

Version 2.8 - 17 May 2019

-   Add support for reuse_backup in geo-redundancy for incremental
    backup copy in passive nodes

-   Improve performance of rsync based copy by using strptime instead of
    the more generic dateutil.parser (#210)

-   Add ‘--test’ option to barman-wal-archive and barman-wal-restore to
    verify the connection with the Barman server

-   Complain if backup_options is not explicitly set, as the future
    default value will change from exclusive_backup to concurrent_backup
    when PostgreSQL 9.5 will be declared EOL by the PGDG

-   Display additional settings in the show-server and diagnose
    commands: archive_timeout, data_checksums, hot_standby,
    max_wal_senders, max_replication_slots and wal_compression.

-   Merge the barman-cli project in Barman

-   Bug fixes:

    -   Fix encoding error in get-wal on Python 3 (Jeff Janes, #221)
    -   Fix exclude_and_protect_filter (Jeff Janes, #217)
    -   Remove spurious message when resetting WAL (Jeff Janes, #215)
    -   Fix sync-wals error if primary has WALs older than the first
        backup
    -   Support for double quotes in synchronous_standby_names setting

-   Minor changes:

    -   Improve messaging of check --nagios for inactive servers
    -   Log remote SSH command with recover command
    -   Hide logical decoding connections in replication-status command

This release officially supports Python 3 and deprecates Python 2 (which
might be discontinued in future releases).

PostgreSQL 9.3 and older is deprecated from this release of Barman.
Support for backup from standby is now limited to PostgreSQL 9.4 or
higher and to WAL shipping from the standby (please refer to the
documentation for details).

Version 2.7 - 21 Mar 2019

-   Fix error handling during the parallel backup. Previously an
    unrecoverable error during the copy could have corrupted the barman
    internal state, requiring a manual kill of barman process with
    SIGTERM and a manual cleanup of the running backup in PostgreSQL.
    (GH#199)

-   Fix support of UTF-8 characters in input and output (GH#194 and
    GH#196)

-   Ignore history/backup/partial files for first sync of geo-redundancy
    (GH#198)

-   Fix network failure with geo-redundancy causing cron to break
    (GH#202)

-   Fix backup validation in PostgreSQL older than 9.2

-   Various documentation fixes

Version 2.6 - 4 Feb 2019

-   Add support for Geographical redundancy, introducing 3 new commands:
    sync-info, sync-backup and sync-wals. Geo-redundancy allows a Barman
    server to use another Barman server as data source instead of a
    PostgreSQL server.

-   Add put-wal command that allows Barman to safely receive WAL files
    via PostgreSQL's archive_command using the barman-wal-archive script
    included in barman-cli

-   Add ANSI colour support to check command

-   Minor fixes:

    -   Fix switch-wal on standby with an empty WAL directory
    -   Honour archiver locking in wait_for_wal method
    -   Fix WAL compression detection algorithm
    -   Fix current_action in concurrent stop backup errors
    -   Do not treat lock file busy as an error when validating a backup

Version 2.5 - 23 Oct 2018

-   Add support for PostgreSQL 11

-   Add check-backup command to verify that WAL files required for
    consistency of a base backup are present in the archive. Barman now
    adds a new state (WAITING_FOR_WALS) after completing a base backup,
    and sets it to DONE once it has verified that all WAL files from
    start to the end of the backup exist. This command is included in
    the regular cron maintenance job. Barman now notifies users
    attempting to recover a backup that is in WAITING_FOR_WALS state.

-   Allow switch-xlog --archive to work on a standby (just for the
    archive part)

-   Bug fixes:

    -   Fix decoding errors reading external commands output (issue
        #174)

    -   Fix documentation regarding WAL streaming and backup from
        standby

Version 2.4 - 25 May 2018

-   Add standard and retry hook scripts for backup deletion (pre/post)

-   Add standard and retry hook scripts for recovery (pre/post)

-   Add standard and retry hook scripts for WAL deletion (pre/post)

-   Add --standby-mode option to barman recover to add standby_mode = on
    in pre-generated recovery.conf

-   Add --target-action option to barman recover, allowing users to add
    shutdown, pause or promote to the pre-generated recovery.conf file

-   Improve usability of point-in-time recovery with consistency checks
    (e.g. recovery time is after end time of backup)

-   Minor documentation improvements

-   Drop support for Python 3.3

Relevant bug fixes:

-   Fix remote get_file_content method (Github #151), preventing
    incremental recovery from happening

-   Unicode issues with command (Github #143 and #150)

-   Add --wal-method=none when pg_basebackup >= 10 (Github #133)

Minor bug fixes:

-   Stop process manager module from ovewriting lock files content

-   Relax the rules for rsync output parsing

-   Ignore vanished files in streaming directory

-   Case insensitive slot names (Github #170)

-   Make DataTransferFailure.from_command_error() more resilient
    (Github #86)

-   Rename command() to barman_command() (Github #118)

-   Initialise synchronous standby names list if not set (Github #111)

-   Correct placeholders ordering (GitHub #138)

-   Force datestyle to iso for replication connections

-   Returns error if delete command does not remove the backup

-   Fix exception when calling is_power_of_two(None)

-   Downgraded sync standby names messages to debug (Github #89)

Version 2.3 - 5 Sep 2017

-   Add support to PostgreSQL 10

-   Follow naming changes in PostgreSQL 10:

    -   The switch-xlog command has been renamed to switch-wal.
    -   In commands output, the xlog word has been changed to WAL and
        location has been changed to LSN when appropriate.

-   Add the --network-compression/--no-network-compression options to
    barman recover to enable or disable network compression at run-time

-   Add --target-immediate option to recover command, in order to exit
    recovery when a consistent state is reached (end of the backup,
    available from PostgreSQL 9.4)

-   Show cluster state (master or standby) with barman status command

-   Documentation improvements

-   Bug fixes:

    -   Fix high memory usage with parallel_jobs > 1 (#116)
    -   Better handling of errors using parallel copy (#114)
    -   Make barman diagnose more robust with system exceptions
    -   Let archive-wal ignore files with .tmp extension

Version 2.2 - 17 Jul 2017

-   Implement parallel copy for backup/recovery through the
    parallel_jobs global/server option to be overridden by the --jobs or
    -j runtime option for the backup and recover command. Parallel
    backup is available only for the rsync copy method. By default, it
    is set to 1 (for behaviour compatibility with previous versions).

-   Support custom WAL size for PostgreSQL 8.4 and newer. At backup
    time, Barman retrieves from PostgreSQL wal_segment_size and
    wal_block_size values and computes the necessary calculations.

-   Improve check command to ensure that incoming directory is empty
    when archiver=off, and streaming directory is empty when
    streaming_archiver=off (#80).

-   Add external_configuration to backup_options so that users can
    instruct Barman to ignore backup of configuration files when they
    are not inside PGDATA (default for Debian/Ubuntu installations). In
    this case, Barman does not display a warning anymore.

-   Add --get-wal and --no-get-wal options to barman recover

-   Add max_incoming_wals_queue global/server option for the check
    command so that a non blocking error is returned in case incoming
    WAL directories for both archiver and the streaming_archiver contain
    more files than the specified value.

-   Documentation improvements

-   File format changes:

    -   The format of backup.info file has changed. For this reason a
        backup taken with Barman 2.2 cannot be read by a previous
        version of Barman. But, backups taken by previous versions can
        be read by Barman 2.2.

-   Minor bug fixes:

    -   Allow replication-status to work against a standby
    -   Close any PostgreSQL connection before starting pg_basebackup
        (#104, #108)
    -   Safely handle paths containing special characters
    -   Archive .partial files after promotion of streaming source
    -   Recursively create directories during recovery (SF#44)
    -   Improve xlog.db locking (#99)
    -   Remove tablespace_map file during recover (#95)
    -   Reconnect to PostgreSQL if connection drops (SF#82)

Version 2.1 - 5 Jan 2017

-   Add --archive and --archive-timeout options to switch-xlog command

-   Preliminary support for PostgreSQL 10 (#73)

-   Minor additions:

    -   Add last archived WAL info to diagnose output
    -   Add start time and execution time to the output of delete
        command

-   Minor bug fixes:

    -   Return failure for get-wal command on inactive server
    -   Make streaming_archiver_names and streaming_backup_name options
        global (#57)
    -   Fix rsync failures due to files truncated during transfer (#64)
    -   Correctly handle compressed history files (#66)
    -   Avoid de-referencing symlinks in pg_tblspc when preparing
        recovery (#55)
    -   Fix comparison of last archiving failure (#40, #58)
    -   Avoid failing recovery if postgresql.conf is not writable (#68)
    -   Fix output of replication-status command (#56)
    -   Exclude files from backups like pg_basebackup (#65, #72)
    -   Exclude directories from other Postgres versions while copying
        tablespaces (#74)
    -   Make retry hook script options global

Version 2.0 - 27 Sep 2016

-   Support for pg_basebackup and base backups over the PostgreSQL
    streaming replication protocol with backup_method=postgres
    (PostgreSQL 9.1 or higher required)

-   Support for physical replication slots through the slot_name
    configuration option as well as the --create-slot and --drop-slot
    options for the receive-wal command (PostgreSQL 9.4 or higher
    required). When slot_name is specified and streaming_archiver is
    enabled, receive-wal transparently integrates with pg_receivexlog,
    and check makes sure that slots exist and are actively used

-   Support for the new backup API introduced in PostgreSQL 9.6, which
    transparently enables concurrent backups and backups from standby
    servers using the standard rsync method of backup. Concurrent backup
    was only possible for PostgreSQL 9.2 to 9.5 versions through the
    pgespresso extension. The new backup API will make pgespresso
    redundant in the future

-   If properly configured, Barman can function as a synchronous standby
    in terms of WAL streaming. By properly setting the
    streaming_archiver_name in the synchronous_standby_names priority
    list on the master, and enabling replication slot support, the
    receive-wal command can now be part of a PostgreSQL synchronous
    replication cluster, bringing RPO=0 (PostgreSQL 9.5.5 or
    higher required)

-   Introduce barman-wal-restore, a standard and robust script written
    in Python that can be used as restore_command in recovery.conf files
    of any standby server of a cluster. It supports remote parallel
    fetching of WAL files by efficiently invoking get-wal through SSH.
    Currently available as a separate project called barman-cli. The
    barman-cli package is required for remote recovery when get-wal is
    listed in recovery_options

-   Control the maximum execution time of the check command through the
    check_timeout global/server configuration option (30 seconds
    by default)

-   Limit the number of WAL segments that are processed by an
    archive-wal run, through the archiver_batch_size and
    streaming_archiver_batch_size global/server options which control
    archiving of WAL segments coming from, respectively, the standard
    archiver and receive-wal

-   Removed locking of the XLOG database during check operations

-   The show-backup command is now aware of timelines and properly
    displays which timelines can be used as recovery targets for a given
    base backup. Internally, Barman is now capable of parsing .history
    files

-   Improved the logic behind the retry mechanism when copy operations
    experience problems. This involves backup (rsync and postgres) as
    well as remote recovery (rsync)

-   Code refactoring involving remote command and physical copy
    interfaces

-   Bug fixes:

    -   Correctly handle .history files from streaming
    -   Fix replication-status on PostgreSQL 9.1
    -   Fix replication-status when sent and write locations are not
        available
    -   Fix misleading message on pg_receivexlog termination

Version 1.6.1 - 23 May 2016

-   Add --peek option to get-wal command to discover existing WAL files
    from the Barman's archive

-   Add replication-status command for monitoring the status of any
    streaming replication clients connected to the PostgreSQL server.
    The --target option allows users to limit the request to only hot
    standby servers or WAL streaming clients

-   Add the switch-xlog command to request a switch of a WAL file to the
    PostgreSQL server. Through the '--force' it issues a CHECKPOINT
    beforehand

-   Add streaming_archiver_name option, which sets a proper
    application_name to pg_receivexlog when streaming_archiver is
    enabled (only for PostgreSQL 9.3 and above)

-   Check for _superuser_ privileges with PostgreSQL's standard
    connections (#30)

-   Check the WAL archive is never empty

-   Check for 'backup_label' on the master when server is down

-   Improve barman-wal-restore contrib script

-   Bug fixes:

    -   Treat the "failed backups" check as non-fatal
    -   Rename '-x' option for get-wal as '-z'
    -   Add archive_mode=always support for PostgreSQL 9.5 (#32)
    -   Properly close PostgreSQL connections when necessary
    -   Fix receive-wal for pg_receive_xlog version 9.2

Version 1.6.0 - 29 Feb 2016

-   Support for streaming replication connection through the
    streaming_conninfo server option

-   Support for the streaming_archiver option that allows Barman to
    receive WAL files through PostgreSQL's native streaming protocol.
    When set to 'on', it relies on pg_receivexlog to receive WAL data,
    reducing Recovery Point Objective. Currently, WAL streaming is an
    additional feature (standard log archiving is still required)

-   Implement the receive-wal command that, when streaming_archiver is
    on, wraps pg_receivexlog for WAL streaming. Add --stop option to
    stop receiving WAL files via streaming protocol. Add --reset option
    to reset the streaming status and restart from the current xlog
    in Postgres.

-   Automatic management (startup and stop) of receive-wal command via
    cron command

-   Support for the path_prefix configuration option

-   Introduction of the archiver option (currently fixed to on) which
    enables continuous WAL archiving for a specific server, through log
    shipping via PostgreSQL's archive_command

-   Support for streaming_wals_directory and errors_directory options

-   Management of WAL duplicates in archive-wal command and integration
    with check command

-   Verify if pg_receivexlog is running in check command when
    streaming_archiver is enabled

-   Verify if failed backups are present in check command

-   Accept compressed WAL files in incoming directory

-   Add support for the pigz compressor (thanks to Stefano Zacchiroli
    zack@upsilon.cc)

-   Implement pygzip and pybzip2 compressors (based on an initial idea
    of Christoph Moench-Tegeder christoph@2ndquadrant.de)

-   Creation of an implicit restore point at the end of a backup

-   Current size of the PostgreSQL data files in barman status

-   Permit archive_mode=always for PostgreSQL 9.5 servers (thanks to
    Christoph Moench-Tegeder christoph@2ndquadrant.de)

-   Complete refactoring of the code responsible for connecting to
    PostgreSQL

-   Improve messaging of cron command regarding sub-processes

-   Native support for Python >= 3.3

-   Changes of behaviour:
    -   Stop trashing WAL files during archive-wal (commit:e3a1d16)

-   Bug fixes:
    -   Atomic WAL file archiving (#9 and #12)
    -   Propagate "-c" option to any Barman subprocess (#19)
    -   Fix management of backup ID during backup deletion (#22)
    -   Improve archive-wal robustness and log messages (#24)
    -   Improve error handling in case of missing parameters

Version 1.5.1 - 16 Nov 2015

-   Add support for the 'archive-wal' command which performs WAL
    maintenance operations on a given server
-   Add support for "per-server" concurrency of the 'cron' command
-   Improved management of xlog.db errors
-   Add support for mixed compression types in WAL files (SF.net#61)
-   Bug fixes:
    -   Avoid retention policy checks during the recovery
    -   Avoid 'wal_level' check on PostgreSQL version < 9.0 (#3)
    -   Fix backup size calculation (#5)

Version 1.5.0 - 28 Sep 2015

-   Add support for the get-wal command which allows users to fetch any
    WAL file from the archive of a specific server
-   Add support for retry hook scripts, a special kind of hook scripts
    that Barman tries to run until they succeed
-   Add active configuration option for a server to temporarily disable
    the server by setting it to False
-   Add barman_lock_directory global option to change the location of
    lock files (by default: 'barman_home')
-   Execute the full suite of checks before starting a backup, and skip
    it in case one or more checks fail
-   Forbid to delete a running backup
-   Analyse include directives of a PostgreSQL server during backup and
    recover operations
-   Add check for conflicting paths in the configuration of Barman, both
    intra (by temporarily disabling a server) and inter-server (by
    refusing any command, to any server).
-   Add check for wal_level
-   Add barman-wal-restore script to be used as restore_command on a
    standby server, in conjunction with barman get-wal
-   Implement a standard and consistent policy for error management
-   Improved cache management of backups
-   Improved management of configuration in unit tests
-   Tutorial and man page sources have been converted to Markdown format
-   Add code documentation through Sphinx
-   Complete refactor of the code responsible for managing the backup
    and the recover commands
-   Changed internal directory structure of a backup
-   Introduce copy_method option (currently fixed to rsync)
-   Bug fixes:
    -   Manage options without '=' in PostgreSQL configuration files
    -   Preserve Timeline history files (Fixes: #70)
    -   Workaround for rsync on SUSE Linux (Closes: #13 and #26)
    -   Disables dangerous settings in postgresql.auto.conf
        (Closes: #68)

Version 1.4.1 - 05 May 2015

* Fix for WAL archival stop working if first backup is EMPTY
  (Closes: #64)
* Fix exception during error handling in Barman recovery
  (Closes: #65)
* After a backup, limit cron activity to WAL archiving only
  (Closes: #62)
* Improved robustness and error reporting of the backup delete
  command (Closes: #63)
* Fix computation of WAL production ratio as reported in the
  show-backup command
* Improved management of xlogdb file, which is now correctly fsynced
  when updated. Also, the rebuild-xlogdb command now operates on a
  temporary new file, which overwrites the main one when finished.
* Add unit tests for dateutil module compatibility
* Modified Barman version following PEP 440 rules and added support
  of tests in Python 3.4

Version 1.4.0 - 26 Jan 2015

* Incremental base backup implementation through the reuse_backup
  global/server option. Possible values are off (disabled,
  default), copy (preventing unmodified files from being
  transferred) and link (allowing for deduplication through hard
  links).
* Store and show deduplication effects when using reuse_backup=
  link.
* Added transparent support of pg_stat_archiver (PostgreSQL 9.4) in
  check, show-server and status commands.
* Improved administration by invoking WAL maintenance at the end of
  a successful backup.
* Changed the way unused WAL files are trashed, by differentiating
  between concurrent and exclusive backup cases.
* Improved performance of WAL statistics calculation.
* Treat a missing pg_ident.conf as a WARNING rather than an error.
* Refactored output layer by removing remaining yield calls.
* Check that rsync is in the system path.
* Include history files in WAL management.
* Improved robustness through more unit tests.
* Fixed bug #55: Ignore fsync EINVAL errors on directories.
* Fixed bug #58: retention policies delete.

Version 1.3.3 - 21 Aug 2014

* Added "last_backup_max_age", a new global/server option that
  allows administrators to set the max age of the last backup in a
  catalogue, making it easier to detect any issues with periodical
  backup execution
* Improved robustness of "barman backup" by introducing two global/
  server options: "basebackup_retry_times" and
  "basebackup_retry_sleep". These options allow an administrator to
  specify, respectively, the number of attempts for a copy
  operation after a failure, and the number of seconds of wait
  before retrying
* Improved the recovery process via rsync on an existing directory
  (incremental recovery), by splitting the previous rsync call into
  several ones - invoking checksum control only when necessary
* Added support for PostgreSQL 8.3
* Minor changes:

    + Support for comma separated list values configuration options
    + Improved backup durability by calling fsync() on backup and
      WAL files during "barman backup" and "barman cron"
    + Improved Nagios output for "barman check --nagios"
    + Display compression ratio for WALs in "barman show-backup"
    + Correctly handled keyboard interruption (CTRL-C) while
      performing barman backup
    + Improved error messages of failures regarding the stop of a
      backup
    + Wider coverage of unit tests
* Bug fixes:

    + Copies "recovery.conf" on the remote server during "barman
      recover" (#45)
    + Correctly detect pre/post archive hook scripts (#41)

Version 1.3.2 - 15 Apr 2014

* Fixed incompatibility with PostgreSQL 8.4 (Closes #40, bug
  introduced in version 1.3.1)

Version 1.3.1 - 14 Apr 2014

* Added support for concurrent backup of PostgreSQL 9.2 and 9.3
  servers that use the "pgespresso" extension. This feature is
  controlled by the "backup_options" configuration option (global/
  server) and activated when set to "concurrent_backup". Concurrent
  backup allows DBAs to perform full backup operations from a
  streaming replicated standby.
* Added the "barman diagnose" command which prints important
  information about the Barman system (extremely useful for support
  and problem solving)
* Improved error messages and exception handling interface
* Fixed bug in recovery of tablespaces that are created inside the
  PGDATA directory (bug introduced in version 1.3.0)
* Fixed minor bug of unhandled -q option, for quiet mode of
  commands to be used in cron jobs (bug introduced in version
  1.3.0)
* Minor bug fixes and code refactoring

Version 1.3.0 - 3 Feb 2014

* Refactored BackupInfo class for backup metadata to use the new
  FieldListFile class (infofile module)

* Refactored output layer to use a dedicated module, in order to
  facilitate integration with Nagios (NagiosOutputWriter class)

* Refactored subprocess handling in order to isolate stdin/stderr/
  stdout channels (command_wrappers module)

* Refactored hook scripts management

* Extracted logging configuration and userid enforcement from the
  configuration class.

* Support for hook scripts to be executed before and after a WAL
  file is archived, through the 'pre_archive_script' and
  'post_archive_script' configuration options.

* Implemented immediate checkpoint capability with
  --immediate-checkpoint command option and 'immediate_checkpoint'
  configuration option

* Implemented network compression for remote backup and recovery
  through the 'network_compression' configuration option (#19)

* Implemented the 'rebuild-xlogdb' command (Closes #27 and #28)

* Added deduplication of tablespaces located inside the PGDATA
  directory

* Refactored remote recovery code to work the same way local
  recovery does, by performing remote directory preparation
  (assuming the remote user has the right permissions on the remote
  server)

* 'barman backup' now tries and create server directories before
  attempting to execute a full backup (#14)

* Fixed bug #22: improved documentation for tablespaces relocation

* Fixed bug #31: 'barman cron' checks directory permissions for
  lock file

* Fixed bug #32: xlog.db read access during cron activities

Version 1.2.3 - 5 September 2013

* Added support for PostgreSQL 9.3

* Added support for the "--target-name" recovery option, which allows to
  restore to a named point previously specified with pg_create_restore_point
  (only for PostgreSQL 9.1 and above users)

* Fixed bug #27 about flock() usage with barman.lockfile (many thanks to
  Damon Snyder <damonsnyder at users.sf.net>)

* Introduced Python 3 compatibility

Version 1.2.2 - 24 June 2013

* Fix python 2.6 compatibility

Version 1.2.1 - 17 June 2013

* Added the "bandwidth_limit" global/server option which allows
  to limit the I/O bandwidth (in KBPS) for backup and recovery operations

* Added the "tablespace_bandwidth_limit" global/server option which allows
  to limit the I/O bandwidth (in KBPS) for backup and recovery operations
  on a per tablespace basis

* Added /etc/barman/barman.conf as default location

* Bug fix: avoid triggering the minimum_redundancy check
  on FAILED backups (thanks to Jérôme Vanandruel)

Version 1.2.0 - 31 Jan 2013

* Added the "retention_policy_mode" global/server option which defines
  the method for enforcing retention policies (currently only "auto")

* Added the "minimum_redundancy" global/server option which defines
  the minimum number of backups to be kept for a server

* Added the "retention_policy" global/server option which defines
  retention policies management based on redundancy (e.g. REDUNDANCY 4)
  or recovery window (e.g. RECOVERY WINDOW OF 3 MONTHS)

* Added retention policy support to the logging infrastructure, the
  "check" and the "status" commands

* The "check" command now integrates minimum redundancy control

* Added retention policy states (valid, obsolete and potentially obsolete)
  to "show-backup" and "list-backup" commands

* The 'all' keyword is now forbidden as server name

* Added basic support for Nagios plugin output to the 'check'
  command through the --nagios option

* Barman now requires argh => 0.21.2 and argcomplete-

* Minor bug fixes

Version 1.1.2 - 29 Nov 2012

* Added "configuration_files_directory" option that allows
  to include multiple server configuration files from a directory

* Support for special backup IDs: latest, last, oldest, first

* Management of  multiple servers to the 'list-backup' command.
  'barman list-backup all' now list backups for all the configured servers.

* Added "application_name" management for PostgreSQL >= 9.0

* Fixed bug #18: ignore missing WAL files if not found during delete

Version 1.1.1 - 16 Oct 2012

* Fix regressions in recover command.

Version 1.1.0 - 12 Oct 2012

* Support for hook scripts to be executed before and after
  a 'backup' command through the 'pre_backup_script' and 'post_backup_script'
  configuration options.

* Management of  multiple servers to the 'backup' command.
  'barman backup all' now iteratively backs up all the configured servers.

* Fixed bug #9: "9.2 issue with pg_tablespace_location()"

* Add warning in recovery when file location options have been defined
  in the postgresql.conf file (issue #10)

* Fail fast on recover command if the destination directory contains
  the ':' character (Closes: #4) or if an invalid tablespace
  relocation rule is passed

* Report an informative message when pg_start_backup() invocation
  fails because an exclusive backup is already running (Closes: #8)

Version 1.0.0 - 6 July 2012

* Backup of multiple PostgreSQL servers, with different versions. Versions
  from PostgreSQL 8.4+ are supported.

* Support for secure remote backup (through SSH)

* Management of a catalog of backups for every server, allowing users
  to easily create new backups, delete old ones or restore them

* Compression of WAL files that can be configured on a per server
  basis using compression/decompression filters, both predefined (gzip
  and bzip2) or custom

* Support for INI configuration file with global and per-server directives.
  Default location for configuration files are /etc/barman.conf or
  ~/.barman.conf. The '-c' option allows users to specify a different one

* Simple indexing of base backups and WAL segments that does not require
  a local database

* Maintenance mode (invoked through the 'cron' command) which performs
  ordinary operations such as WAL archival and compression, catalog
  updates, etc.

* Added the 'backup' command which takes a full physical base backup
  of the given PostgreSQL server configured in Barman

* Added the 'recover' command which performs local recovery of a given
  backup, allowing DBAs to specify a point in time. The 'recover' command
  supports relocation of both the PGDATA directory and, where applicable,
  the tablespaces

* Added the '--remote-ssh-command' option to the 'recover' command for
  remote recovery of a backup. Remote recovery does not currently support
  relocation of tablespaces

* Added the 'list-server' command that lists all the active servers
  that have been configured in barman

* Added the 'show-server' command that shows the relevant information
  for a given server, including all configuration options

* Added the 'status' command which shows information about the current
  state of a server, including Postgres version, current transaction ID,
  archive command, etc.

* Added the 'check' command which returns 0 if everything Barman needs
  is functioning correctly

* Added the 'list-backup' command that lists all the available backups
  for a given server, including size of the base backup and total size
  of the related WAL segments

* Added the 'show-backup' command that shows the relevant information
  for a given backup, including time of start, size, number of related
  WAL segments and their size, etc.

* Added the 'delete' command which removes a backup from the catalog

* Added the 'list-files' command which lists all the files for a
  single backup

* RPM Package for RHEL 5/6
