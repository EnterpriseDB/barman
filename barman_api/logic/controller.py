# -*- coding: utf-8 -*-
# Â© Copyright EnterpriseDB UK Limited 2013-2021
#
# This file is part of Barman.
#
# Barman is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Barman is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Barman.  If not, see <http://www.gnu.org/licenses/>.

import importlib
import os
import inspect


class Controller:
    """
    Provides an abstraction layer to decouple the autogenerated app controllers and the actual
    controller logic.

    In the event that the API changes in the future, the autogenerated code will need to be
    re-generated, which means that the actual logic behind those endpoints needs to live
    in different files that won't be clobbered by that process.

    The idea of this class is to try to make it easier in the future if the API does change,
    that we only need to change
        - the actual logic in the logic controllers
        - what classes get called here, if different backend pieces need to be accessed
    rather than having to try to change or more deeply customize the autogeneration templates.
    """

    @staticmethod
    def call_method(func_name, *args, **kwargs):
        """
        Route the given function from the given controller to its implementation

        To take advantage of the generic programming, requires that
            1. The Adapter class for the Controller has the same filename, ie
                    openapi_server/controllers/utility_controller.py
                has the implementation file
                    logic/utility_controller.py
            2. The logic controller file has a class with the same name but with caps
                instead of underscores, ie utility_controller.py has UtilityController
            3. The controller class has methods with the same names as the autogenerated endpoint
                functions

        If a case can't fit into this scheme, you'll have to add special case logic.

        :param controller_filename - str
                            We pull from the filename because the tag (from the spec) is used in the
                            filename, but not passed into the template itself when generating the code.
                            Changing this would require branching the openapi-generator code itself, not
                            just providing a template override.
        :param func_name - str, the endpoint function in the autogenerated controller, which
                                comes from the operationId in the OAS spec
        :param args - arguments for the called endpoint function
        :param kwargs - keyword arguments for the called endpoint function
        """
        controller_filename = inspect.stack()[1].filename
        controller_name = os.path.splitext(os.path.split(controller_filename)[-1])[0]
        controller_module = importlib.import_module(
            f".{controller_name}", package="logic"
        )
        class_name = "".join([s.capitalize() for s in controller_name.split("_")])
        controller_class = getattr(controller_module, class_name)
        controller = controller_class()
        return getattr(controller, func_name)(*args, **kwargs)
