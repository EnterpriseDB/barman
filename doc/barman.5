.\" Automatically generated by Pandoc 2.2.1
.\"
.TH "BARMAN" "5" "September 22, 2020" "Barman User manuals" "Version 2.14"
.hy
.SH NAME
.PP
barman \- Backup and Recovery Manager for PostgreSQL
.SH DESCRIPTION
.PP
Barman is an administration tool for disaster recovery of PostgreSQL
servers written in Python and maintained by EnterpriseDB.
Barman can perform remote backups of multiple servers in business
critical environments and helps DBAs during the recovery phase.
.SH CONFIGURATION FILE LOCATIONS
.PP
The system\-level Barman configuration file is located at
.IP
.nf
\f[C]
/etc/barman.conf
\f[]
.fi
.PP
or
.IP
.nf
\f[C]
/etc/barman/barman.conf
\f[]
.fi
.PP
and is overridden on a per\-user level by
.IP
.nf
\f[C]
$HOME/.barman.conf
\f[]
.fi
.SH CONFIGURATION FILE SYNTAX
.PP
The Barman configuration file is a plain \f[C]INI\f[] file.
There is a general section called \f[C][barman]\f[] and a section
\f[C][servername]\f[] for each server you want to backup.
Rows starting with \f[C];\f[] are comments.
.SH CONFIGURATION FILE DIRECTORY
.PP
Barman supports the inclusion of multiple configuration files, through
the \f[C]configuration_files_directory\f[] option.
Included files must contain only server specifications, not global
configurations.
If the value of \f[C]configuration_files_directory\f[] is a directory,
Barman reads all files with \f[C]\&.conf\f[] extension that exist in
that folder.
For example, if you set it to \f[C]/etc/barman.d\f[], you can specify
your PostgreSQL servers placing each section in a separate
\f[C]\&.conf\f[] file inside the \f[C]/etc/barman.d\f[] folder.
.SH OPTIONS
.TP
.B active
When set to \f[C]true\f[] (default), the server is in full operational
state.
When set to \f[C]false\f[], the server can be used for diagnostics, but
any operational command such as backup execution or WAL archiving is
temporarily disabled.
When adding a new server to Barman, we suggest setting active=false at
first, making sure that barman check shows no problems, and only then
activating the server.
This will avoid spamming the Barman logs with errors during the initial
setup.
.RS
.RE
.TP
.B archiver
This option allows you to activate log file shipping through
PostgreSQL\[aq]s \f[C]archive_command\f[] for a server.
If set to \f[C]true\f[] (default), Barman expects that continuous
archiving for a server is in place and will activate checks as well as
management (including compression) of WAL files that Postgres deposits
in the \f[I]incoming\f[] directory.
Setting it to \f[C]false\f[], will disable standard continuous archiving
for a server.
Global/Server.
.RS
.RE
.TP
.B archiver_batch_size
This option allows you to activate batch processing of WAL files for the
\f[C]archiver\f[] process, by setting it to a value > 0.
Otherwise, the traditional unlimited processing of the WAL queue is
enabled.
When batch processing is activated, the \f[C]archive\-wal\f[] process
would limit itself to maximum \f[C]archiver_batch_size\f[] WAL segments
per single run.
Integer.
Global/Server.
.RS
.RE
.TP
.B backup_directory
Directory where backup data for a server will be placed.
Server.
.RS
.RE
.TP
.B backup_method
Configure the method barman used for backup execution.
If set to \f[C]rsync\f[] (default), barman will execute backup using the
\f[C]rsync\f[] command over SSH (requires \f[C]ssh_command\f[]).
If set to \f[C]postgres\f[] barman will use the \f[C]pg_basebackup\f[]
command to execute the backup.
If set to \f[C]local\-rsync\f[], barman will assume to be running on the
same server as the the PostgreSQL instance and with the same user, then
execute \f[C]rsync\f[] for the file system copy.
Global/Server.
.RS
.RE
.TP
.B backup_options
This option allows you to control the way Barman interacts with
PostgreSQL for backups.
It is a comma\-separated list of values that accepts the following
options:
.RS
.IP \[bu] 2
\f[C]exclusive_backup\f[] (default when
\f[C]backup_method\ =\ rsync\f[]): \f[C]barman\ backup\f[] executes
backup operations using the standard exclusive backup approach
(technically through \f[C]pg_start_backup\f[] and
\f[C]pg_stop_backup\f[])
.IP \[bu] 2
\f[C]concurrent_backup\f[] (default when
\f[C]backup_method\ =\ postgres\f[]): if using PostgreSQL 9.2, 9.3, 9.4,
and 9.5, Barman requires the \f[C]pgespresso\f[] module to be installed
on the PostgreSQL server and can be used to perform a backup from a
standby server.
Starting from PostgreSQL 9.6, Barman uses the new PostgreSQL API to
perform backups from a standby server.
.IP \[bu] 2
\f[C]external_configuration\f[]: if present, any warning regarding
external configuration files is suppressed during the execution of a
backup.
.PP
Note that \f[C]exclusive_backup\f[] and \f[C]concurrent_backup\f[] are
mutually exclusive.
Global/Server.
.RE
.TP
.B bandwidth_limit
This option allows you to specify a maximum transfer rate in kilobytes
per second.
A value of zero specifies no limit (default).
Global/Server.
.RS
.RE
.TP
.B barman_home
Main data directory for Barman.
Global.
.RS
.RE
.TP
.B barman_lock_directory
Directory for locks.
Default: \f[C]%(barman_home)s\f[].
Global.
.RS
.RE
.TP
.B basebackup_retry_sleep
Number of seconds of wait after a failed copy, before retrying Used
during both backup and recovery operations.
Positive integer, default 30.
Global/Server.
.RS
.RE
.TP
.B basebackup_retry_times
Number of retries of base backup copy, after an error.
Used during both backup and recovery operations.
Positive integer, default 0.
Global/Server.
.RS
.RE
.TP
.B basebackups_directory
Directory where base backups will be placed.
Server.
.RS
.RE
.TP
.B check_timeout
Maximum execution time, in seconds per server, for a barman check
command.
Set to 0 to disable the timeout.
Positive integer, default 30.
Global/Server.
.RS
.RE
.TP
.B compression
Standard compression algorithm applied to WAL files.
Possible values are: \f[C]gzip\f[] (requires \f[C]gzip\f[] to be
installed on the system), \f[C]bzip2\f[] (requires \f[C]bzip2\f[]),
\f[C]pigz\f[] (requires \f[C]pigz\f[]), \f[C]pygzip\f[] (Python\[aq]s
internal gzip compressor) and \f[C]pybzip2\f[] (Python\[aq]s internal
bzip2 compressor).
Global/Server.
.RS
.RE
.TP
.B conninfo
Connection string used by Barman to connect to the Postgres server.
This is a libpq connection string, consult the PostgreSQL
manual (https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING)
for more information.
Commonly used keys are: host, hostaddr, port, dbname, user, password.
Server.
.RS
.RE
.TP
.B create_slot
When set to \f[C]auto\f[] and \f[C]slot_name\f[] is defined, Barman
automatically attempts to create the replication slot if not present.
When set to \f[C]manual\f[] (default), the replication slot needs to be
manually created.
Global/Server.
.RS
.RE
.TP
.B custom_compression_filter
Customised compression algorithm applied to WAL files.
Global/Server.
.RS
.RE
.TP
.B custom_decompression_filter
Customised decompression algorithm applied to compressed WAL files; this
must match the compression algorithm.
Global/Server.
.RS
.RE
.TP
.B description
A human readable description of a server.
Server.
.RS
.RE
.TP
.B errors_directory
Directory that contains WAL files that contain an error; usually this is
related to a conflict with an existing WAL file (e.g.
a WAL file that has been archived after a streamed one).
.RS
.RE
.TP
.B forward_config_path
Parameter which determines whether a passive node should forward its
configuration file path to its primary node during cron or sync\-info
commands.
Set to true if you are invoking barman with the \f[C]\-c/\-\-config\f[]
option and your configuration is in the same place on both the passive
and primary barman servers.
Defaults to false.
.RS
.RE
.TP
.B immediate_checkpoint
This option allows you to control the way PostgreSQL handles checkpoint
at the start of the backup.
If set to \f[C]false\f[] (default), the I/O workload for the checkpoint
will be limited, according to the \f[C]checkpoint_completion_target\f[]
setting on the PostgreSQL server.
If set to \f[C]true\f[], an immediate checkpoint will be requested,
meaning that PostgreSQL will complete the checkpoint as soon as
possible.
Global/Server.
.RS
.RE
.TP
.B incoming_wals_directory
Directory where incoming WAL files are archived into.
Requires \f[C]archiver\f[] to be enabled.
Server.
.RS
.RE
.TP
.B last_backup_maximum_age
This option identifies a time frame that must contain the latest backup.
If the latest backup is older than the time frame, barman check command
will report an error to the user.
If empty (default), latest backup is always considered valid.
Syntax for this option is: "i (DAYS | WEEKS | MONTHS)" where i is a
integer greater than zero, representing the number of days | weeks |
months of the time frame.
Global/Server.
.RS
.RE
.TP
.B log_file
Location of Barman\[aq]s log file.
Global.
.RS
.RE
.TP
.B log_level
Level of logging (DEBUG, INFO, WARNING, ERROR, CRITICAL).
Global.
.RS
.RE
.TP
.B max_incoming_wals_queue
Maximum number of WAL files in the incoming queue (in both streaming and
archiving pools) that are allowed before barman check returns an error
(that does not block backups).
Global/Server.
Default: None (disabled).
.RS
.RE
.TP
.B minimum_redundancy
Minimum number of backups to be retained.
Default 0.
Global/Server.
.RS
.RE
.TP
.B network_compression
This option allows you to enable data compression for network transfers.
If set to \f[C]false\f[] (default), no compression is used.
If set to \f[C]true\f[], compression is enabled, reducing network usage.
Global/Server.
.RS
.RE
.TP
.B parallel_jobs
This option controls how many parallel workers will copy files during a
backup or recovery command.
Default 1.
Global/Server.
For backup purposes, it works only when \f[C]backup_method\f[] is
\f[C]rsync\f[].
.RS
.RE
.TP
.B path_prefix
One or more absolute paths, separated by colon, where Barman looks for
executable files.
The paths specified in \f[C]path_prefix\f[] are tried before the ones
specified in \f[C]PATH\f[] environment variable.
Global/server.
.RS
.RE
.TP
.B post_archive_retry_script
Hook script launched after a WAL file is archived by maintenance.
Being this a \f[I]retry\f[] hook script, Barman will retry the execution
of the script until this either returns a SUCCESS (0), an ABORT_CONTINUE
(62) or an ABORT_STOP (63) code.
In a post archive scenario, ABORT_STOP has currently the same effects as
ABORT_CONTINUE.
Global/Server.
.RS
.RE
.TP
.B post_archive_script
Hook script launched after a WAL file is archived by maintenance, after
\[aq]post_archive_retry_script\[aq].
Global/Server.
.RS
.RE
.TP
.B post_backup_retry_script
Hook script launched after a base backup.
Being this a \f[I]retry\f[] hook script, Barman will retry the execution
of the script until this either returns a SUCCESS (0), an ABORT_CONTINUE
(62) or an ABORT_STOP (63) code.
In a post backup scenario, ABORT_STOP has currently the same effects as
ABORT_CONTINUE.
Global/Server.
.RS
.RE
.TP
.B post_backup_script
Hook script launched after a base backup, after
\[aq]post_backup_retry_script\[aq].
Global/Server.
.RS
.RE
.TP
.B post_delete_retry_script
Hook script launched after the deletion of a backup.
Being this a \f[I]retry\f[] hook script, Barman will retry the execution
of the script until this either returns a SUCCESS (0), an ABORT_CONTINUE
(62) or an ABORT_STOP (63) code.
In a post delete scenario, ABORT_STOP has currently the same effects as
ABORT_CONTINUE.
Global/Server.
.RS
.RE
.TP
.B post_delete_script
Hook script launched after the deletion of a backup, after
\[aq]post_delete_retry_script\[aq].
Global/Server.
.RS
.RE
.TP
.B post_recovery_retry_script
Hook script launched after a recovery.
Being this a \f[I]retry\f[] hook script, Barman will retry the execution
of the script until this either returns a SUCCESS (0), an ABORT_CONTINUE
(62) or an ABORT_STOP (63) code.
In a post recovery scenario, ABORT_STOP has currently the same effects
as ABORT_CONTINUE.
Global/Server.
.RS
.RE
.TP
.B post_recovery_script
Hook script launched after a recovery, after
\[aq]post_recovery_retry_script\[aq].
Global/Server.
.RS
.RE
.TP
.B post_wal_delete_retry_script
Hook script launched after the deletion of a WAL file.
Being this a \f[I]retry\f[] hook script, Barman will retry the execution
of the script until this either returns a SUCCESS (0), an ABORT_CONTINUE
(62) or an ABORT_STOP (63) code.
In a post delete scenario, ABORT_STOP has currently the same effects as
ABORT_CONTINUE.
Global/Server.
.RS
.RE
.TP
.B post_wal_delete_script
Hook script launched after the deletion of a WAL file, after
\[aq]post_wal)delete_retry_script\[aq].
Global/Server.
.RS
.RE
.TP
.B pre_archive_retry_script
Hook script launched before a WAL file is archived by maintenance, after
\[aq]pre_archive_script\[aq].
Being this a \f[I]retry\f[] hook script, Barman will retry the execution
of the script until this either returns a SUCCESS (0), an ABORT_CONTINUE
(62) or an ABORT_STOP (63) code.
Returning ABORT_STOP will propagate the failure at a higher level and
interrupt the WAL archiving operation.
Global/Server.
.RS
.RE
.TP
.B pre_archive_script
Hook script launched before a WAL file is archived by maintenance.
Global/Server.
.RS
.RE
.TP
.B pre_backup_retry_script
Hook script launched before a base backup, after
\[aq]pre_backup_script\[aq].
Being this a \f[I]retry\f[] hook script, Barman will retry the execution
of the script until this either returns a SUCCESS (0), an ABORT_CONTINUE
(62) or an ABORT_STOP (63) code.
Returning ABORT_STOP will propagate the failure at a higher level and
interrupt the backup operation.
Global/Server.
.RS
.RE
.TP
.B pre_backup_script
Hook script launched before a base backup.
Global/Server.
.RS
.RE
.TP
.B pre_delete_retry_script
Hook script launched before the deletion of a backup, after
\[aq]pre_delete_script\[aq].
Being this a \f[I]retry\f[] hook script, Barman will retry the execution
of the script until this either returns a SUCCESS (0), an ABORT_CONTINUE
(62) or an ABORT_STOP (63) code.
Returning ABORT_STOP will propagate the failure at a higher level and
interrupt the backup deletion.
Global/Server.
.RS
.RE
.TP
.B pre_delete_script
Hook script launched before the deletion of a backup.
Global/Server.
.RS
.RE
.TP
.B pre_recovery_retry_script
Hook script launched before a recovery, after
\[aq]pre_recovery_script\[aq].
Being this a \f[I]retry\f[] hook script, Barman will retry the execution
of the script until this either returns a SUCCESS (0), an ABORT_CONTINUE
(62) or an ABORT_STOP (63) code.
Returning ABORT_STOP will propagate the failure at a higher level and
interrupt the recover operation.
Global/Server.
.RS
.RE
.TP
.B pre_recovery_script
Hook script launched before a recovery.
Global/Server.
.RS
.RE
.TP
.B pre_wal_delete_retry_script
Hook script launched before the deletion of a WAL file, after
\[aq]pre_wal_delete_script\[aq].
Being this a \f[I]retry\f[] hook script, Barman will retry the execution
of the script until this either returns a SUCCESS (0), an ABORT_CONTINUE
(62) or an ABORT_STOP (63) code.
Returning ABORT_STOP will propagate the failure at a higher level and
interrupt the WAL file deletion.
Global/Server.
.RS
.RE
.TP
.B pre_wal_delete_script
Hook script launched before the deletion of a WAL file.
Global/Server.
.RS
.RE
.TP
.B primary_ssh_command
Parameter that identifies a Barman server as \f[C]passive\f[].
In a passive node, the source of a backup server is a Barman
installation rather than a PostgreSQL server.
If \f[C]primary_ssh_command\f[] is specified, Barman uses it to
establish a connection with the primary server.
Empty by default, it can also be set globally.
.RS
.RE
.TP
.B recovery_options
Options for recovery operations.
Currently only supports \f[C]get\-wal\f[].
\f[C]get\-wal\f[] activates generation of a basic
\f[C]restore_command\f[] in the resulting recovery configuration that
uses the \f[C]barman\ get\-wal\f[] command to fetch WAL files directly
from Barman\[aq]s archive of WALs.
Comma separated list of values, default empty.
Global/Server.
.RS
.RE
.TP
.B retention_policy
Policy for retention of periodic backups and archive logs.
If left empty, retention policies are not enforced.
For redundancy based retention policy use "REDUNDANCY i" (where i is an
integer > 0 and defines the number of backups to retain).
For recovery window retention policy use "RECOVERY WINDOW OF i DAYS" or
"RECOVERY WINDOW OF i WEEKS" or "RECOVERY WINDOW OF i MONTHS" where i is
a positive integer representing, specifically, the number of days, weeks
or months to retain your backups.
For more detailed information, refer to the official documentation.
Default value is empty.
Global/Server.
.RS
.RE
.TP
.B retention_policy_mode
Currently only "auto" is implemented.
Global/Server.
.RS
.RE
.TP
.B reuse_backup
This option controls incremental backup support.
Global/Server.
Possible values are:
.RS
.IP \[bu] 2
\f[C]off\f[]: disabled (default);
.IP \[bu] 2
\f[C]copy\f[]: reuse the last available backup for a server and create a
copy of the unchanged files (reduce backup time);
.IP \[bu] 2
\f[C]link\f[]: reuse the last available backup for a server and create a
hard link of the unchanged files (reduce backup time and space).
Requires operating system and file system support for hard links.
.RE
.TP
.B slot_name
Physical replication slot to be used by the \f[C]receive\-wal\f[]
command when \f[C]streaming_archiver\f[] is set to \f[C]on\f[].
Requires PostgreSQL >= 9.4.
Global/Server.
Default: None (disabled).
.RS
.RE
.TP
.B ssh_command
Command used by Barman to login to the Postgres server via ssh.
Server.
.RS
.RE
.TP
.B streaming_archiver
This option allows you to use the PostgreSQL\[aq]s streaming protocol to
receive transaction logs from a server.
If set to \f[C]on\f[], Barman expects to find \f[C]pg_receivewal\f[]
(known as \f[C]pg_receivexlog\f[] prior to PostgreSQL 10) in the PATH
(see \f[C]path_prefix\f[] option) and that streaming connection for the
server is working.
This activates connection checks as well as management (including
compression) of WAL files.
If set to \f[C]off\f[] (default) barman will rely only on continuous
archiving for a server WAL archive operations, eventually terminating
any running \f[C]pg_receivexlog\f[] for the server.
Global/Server.
.RS
.RE
.TP
.B streaming_archiver_batch_size
This option allows you to activate batch processing of WAL files for the
\f[C]streaming_archiver\f[] process, by setting it to a value > 0.
Otherwise, the traditional unlimited processing of the WAL queue is
enabled.
When batch processing is activated, the \f[C]archive\-wal\f[] process
would limit itself to maximum \f[C]streaming_archiver_batch_size\f[] WAL
segments per single run.
Integer.
Global/Server.
.RS
.RE
.TP
.B streaming_archiver_name
Identifier to be used as \f[C]application_name\f[] by the
\f[C]receive\-wal\f[] command.
Only available with \f[C]pg_receivewal\f[] (or \f[C]pg_receivexlog\f[]
>= 9.3).
By default it is set to \f[C]barman_receive_wal\f[].
Global/Server.
.RS
.RE
.TP
.B streaming_backup_name
Identifier to be used as \f[C]application_name\f[] by the
\f[C]pg_basebackup\f[] command.
Only available with \f[C]pg_basebackup\f[] >= 9.3.
By default it is set to \f[C]barman_streaming_backup\f[].
Global/Server.
.RS
.RE
.TP
.B streaming_conninfo
Connection string used by Barman to connect to the Postgres server via
streaming replication protocol.
By default it is set to \f[C]conninfo\f[].
Server.
.RS
.RE
.TP
.B streaming_wals_directory
Directory where WAL files are streamed from the PostgreSQL server to
Barman.
Requires \f[C]streaming_archiver\f[] to be enabled.
Server.
.RS
.RE
.TP
.B tablespace_bandwidth_limit
This option allows you to specify a maximum transfer rate in kilobytes
per second, by specifying a comma separated list of tablespaces (pairs
TBNAME:BWLIMIT).
A value of zero specifies no limit (default).
Global/Server.
.RS
.RE
.TP
.B wal_retention_policy
Policy for retention of archive logs (WAL files).
Currently only "MAIN" is available.
Global/Server.
.RS
.RE
.TP
.B wals_directory
Directory which contains WAL files.
Server.
.RS
.RE
.SH HOOK SCRIPTS
.PP
The script definition is passed to a shell and can return any exit code.
.PP
The shell environment will contain the following variables:
.TP
.B \f[C]BARMAN_CONFIGURATION\f[]
configuration file used by barman
.RS
.RE
.TP
.B \f[C]BARMAN_ERROR\f[]
error message, if any (only for the \[aq]post\[aq] phase)
.RS
.RE
.TP
.B \f[C]BARMAN_PHASE\f[]
\[aq]pre\[aq] or \[aq]post\[aq]
.RS
.RE
.TP
.B \f[C]BARMAN_RETRY\f[]
\f[C]1\f[] if it is a \f[I]retry script\f[] (from 1.5.0), \f[C]0\f[] if
not
.RS
.RE
.TP
.B \f[C]BARMAN_SERVER\f[]
name of the server
.RS
.RE
.PP
Backup scripts specific variables:
.TP
.B \f[C]BARMAN_BACKUP_DIR\f[]
backup destination directory
.RS
.RE
.TP
.B \f[C]BARMAN_BACKUP_ID\f[]
ID of the backup
.RS
.RE
.TP
.B \f[C]BARMAN_PREVIOUS_ID\f[]
ID of the previous backup (if present)
.RS
.RE
.TP
.B \f[C]BARMAN_NEXT_ID\f[]
ID of the next backup (if present)
.RS
.RE
.TP
.B \f[C]BARMAN_STATUS\f[]
status of the backup
.RS
.RE
.TP
.B \f[C]BARMAN_VERSION\f[]
version of Barman
.RS
.RE
.PP
Archive scripts specific variables:
.TP
.B \f[C]BARMAN_SEGMENT\f[]
name of the WAL file
.RS
.RE
.TP
.B \f[C]BARMAN_FILE\f[]
full path of the WAL file
.RS
.RE
.TP
.B \f[C]BARMAN_SIZE\f[]
size of the WAL file
.RS
.RE
.TP
.B \f[C]BARMAN_TIMESTAMP\f[]
WAL file timestamp
.RS
.RE
.TP
.B \f[C]BARMAN_COMPRESSION\f[]
type of compression used for the WAL file
.RS
.RE
.PP
Recovery scripts specific variables:
.TP
.B \f[C]BARMAN_DESTINATION_DIRECTORY\f[]
the directory where the new instance is recovered
.RS
.RE
.TP
.B \f[C]BARMAN_TABLESPACES\f[]
tablespace relocation map (JSON, if present)
.RS
.RE
.TP
.B \f[C]BARMAN_REMOTE_COMMAND\f[]
secure shell command used by the recovery (if present)
.RS
.RE
.TP
.B \f[C]BARMAN_RECOVER_OPTIONS\f[]
recovery additional options (JSON, if present)
.RS
.RE
.PP
Only in case of retry hook scripts, the exit code of the script is
checked by Barman.
Output of hook scripts is simply written in the log file.
.SH EXAMPLE
.PP
Here is an example of configuration file:
.IP
.nf
\f[C]
[barman]
;\ Main\ directory
barman_home\ =\ /var/lib/barman

;\ System\ user
barman_user\ =\ barman

;\ Log\ location
log_file\ =\ /var/log/barman/barman.log

;\ Default\ compression\ level
;compression\ =\ gzip

;\ Incremental\ backup
reuse_backup\ =\ link

;\ \[aq]main\[aq]\ PostgreSQL\ Server\ configuration
[main]
;\ Human\ readable\ description
description\ =\ \ "Main\ PostgreSQL\ Database"

;\ SSH\ options
ssh_command\ =\ ssh\ postgres\@pg

;\ PostgreSQL\ connection\ string
conninfo\ =\ host=pg\ user=postgres

;\ PostgreSQL\ streaming\ connection\ string
streaming_conninfo\ =\ host=pg\ user=postgres

;\ Minimum\ number\ of\ required\ backups\ (redundancy)
minimum_redundancy\ =\ 1

;\ Retention\ policy\ (based\ on\ redundancy)
retention_policy\ =\ REDUNDANCY\ 2
\f[]
.fi
.SH SEE ALSO
.PP
\f[C]barman\f[] (1).
.SH AUTHORS
.PP
Barman maintainers (in alphabetical order):
.IP \[bu] 2
Abhijit Menon\-Sen
.IP \[bu] 2
Jane Threefoot
.IP \[bu] 2
Michael Wallace
.PP
Past contributors (in alphabetical order):
.IP \[bu] 2
Anna Bellandi (QA/testing)
.IP \[bu] 2
Britt Cole (documentation reviewer)
.IP \[bu] 2
Carlo Ascani (developer)
.IP \[bu] 2
Francesco Canovai (QA/testing)
.IP \[bu] 2
Gabriele Bartolini (architect)
.IP \[bu] 2
Gianni Ciolli (QA/testing)
.IP \[bu] 2
Giulio Calacoci (developer)
.IP \[bu] 2
Giuseppe Broccolo (developer)
.IP \[bu] 2
Jonathan Battiato (QA/testing)
.IP \[bu] 2
Leonardo Cecchi (developer)
.IP \[bu] 2
Marco Nenciarini (project leader)
.IP \[bu] 2
Niccolò Fei (QA/testing)
.IP \[bu] 2
Rubens Souza (QA/testing)
.IP \[bu] 2
Stefano Bianucci (developer)
.SH RESOURCES
.IP \[bu] 2
Homepage: <http://www.pgbarman.org/>
.IP \[bu] 2
Documentation: <http://docs.pgbarman.org/>
.IP \[bu] 2
Professional support: <https://www.enterprisedb.com/>
.SH COPYING
.PP
Barman is the property of EnterpriseDB UK Limited and its code is
distributed under GNU General Public License v3.
.PP
© Copyright EnterpriseDB UK Limited 2011\-2021
.SH AUTHORS
EnterpriseDB <https://www.enterprisedb.com>.
